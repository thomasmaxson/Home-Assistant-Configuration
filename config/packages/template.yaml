################################################################################
#
# @author      : Thomas Maxson
# @package     : Template Sensors
# @description :
#
################################################################################

sensor:
  - platform: template
    sensors:
      is_week_even:
        friendly_name: "Is Week Even"
        value_template: >-
          {%- set output = ( ( ( now().strftime( '%W' ) ) | int ) % 2 ) == 0 %}
          {{ iif( ( True == output ), 'on', 'off' ) }}
        icon_template: >-
          {%- set output = ( ( ( now().strftime( '%W' ) ) | int ) % 2 ) == 0 %}
          {{ iif( ( True == output ), 'mdi:calendar-check', 'mdi:calendar-remove' ) }}

      is_week_odd:
        friendly_name: "Is Week Odd"
        value_template: >-
          {%- set output = ( ( ( now().strftime( '%W' ) ) | int ) % 2 ) == 1 %}
          {{ iif( ( True == output ), 'on', 'off' ) }}
        icon_template: >-
          {%- set output = ( ( ( now().strftime( '%W' ) ) | int ) % 2 ) == 1 %}
          {{ iif( ( True == output ), 'mdi:calendar-check', 'mdi:calendar-remove' ) }}

      # fourth_wednesday:
      #   friendly_name:"Is Fourth Wednesday"
      #   value_template: >
      #     {% set nth = 4 %}
      #     {% set month = now().month %}
      #     {% set isoweekday = 3 %}
      #     {% set d = now().date().replace( month = month ).replace( day = 1 ) %}
      #     {% set adj = ( isoweekday - d.isoweekday() ) % 7 %}

      #     {{ d + timedelta( days = adj ) + timedelta( weeks = nth - 1 ) }}
      #   icon_template: mdi:calendar-question

      custom_door_closet_hallway_j:
        friendly_name: "Jess' Closet Door"
        value_template: >-
          {%- if is_state( 'binary_sensor.door_closet_hallway_j', 'on' ) -%}
            Open
          {%- elif is_state( 'binary_sensor.door_closet_hallway_j', 'off' ) -%}
            Closed
          {%- else -%}
            Unknown
          {%- endif -%}
        icon_template: >-
          {%- if is_state( 'binary_sensor.door_closet_hallway_j', 'on' ) -%}
          mdi:door-sliding-open
          {%- elif is_state( 'binary_sensor.door_closet_hallway_j', 'off' ) -%}
          mdi:door-sliding
          {%- else -%}
          mdi:cloud-question
          {%- endif -%}

      custom_door_closet_hallway_t:
        friendly_name: "Tom's Closet Door"
        value_template: >-
          {%- if is_state( 'binary_sensor.door_closet_hallway_t', 'on' ) -%}
            Open
          {%- elif is_state( 'binary_sensor.door_closet_hallway_t', 'off' ) -%}
            Closed
          {%- else -%}
            Unknown
          {%- endif -%}
        icon_template: >-
          {%- if is_state( 'binary_sensor.door_closet_hallway_t', 'on' ) -%}
          mdi:door-sliding-open
          {%- elif is_state( 'binary_sensor.door_closet_hallway_t', 'off' ) -%}
          mdi:door-sliding
          {%- else -%}
          mdi:cloud-question
          {%- endif -%}

      custom_fire_tablet_battery_level:
        #device_class: battery
        friendly_name: Battery Level
        unit_of_measurement: "%"
        value_template: >-
          {{ states( 'sensor.fire_tablet_battery_level' ) }}
        icon_template: >-
          {%- set battery_level = states( 'sensor.fire_tablet_battery_level' ) -%}
          {%- set battery_round = ( battery_level | int(0) / 10 ) | int(0) * 10 -%}

          {%- if battery_level == 0 -%}
            mdi:battery-alert
          {%- elif battery_round >= 80 -%}
            mdi:battery
          {%- elif battery_round <= 20 -%}
            mdi:battery-outline
          {%- else -%}
            mdi:battery-{{ battery_round }}
          {%- endif -%}

      household_notifications_snooze_countdown:
        device_class: timestamp
        value_template: >-
          {%- set state = states( 'timer.household_activity_snooze' ) %}
          {%- set duration = state_attr( 'timer.household_activity_snooze', 'duration' ) %}
          {%- set n = now().timestamp() %}
          {%- set h = '00' | int %}
          {%- set m = '00' | int %}
          {%- set s = '00' | int %}

          {%- if state not in [ 'idle', 'unknown', 'unavailable' ] %}
            {%- set h, m, s = duration.split( ':' ) | list | map( 'int' ) %}
          {%- endif %}

          {{ ( n + h * 60 * 60 + m * 60 + s ) | timestamp_custom( '%Y-%m-%dT%H:%M:%S-00:00', false ) }}

      garage_door_open_snooze_countdown:
        device_class: timestamp
        value_template: >-
          {%- set state = states( 'timer.garage_open_snooze' ) %}
          {%- set duration = state_attr( 'timer.garage_open_snooze', 'duration' ) %}
          {%- set n = now().timestamp() %}
          {%- set h = '00' | int %}
          {%- set m = '00' | int %}
          {%- set s = '00' | int %}

          {%- if state not in [ 'idle', 'unknown', 'unavailable' ] %}
            {%- set h, m, s = duration.split( ':' ) | list | map( 'int' ) %}
          {%- endif %}

          {{ ( n + h * 60 * 60 + m * 60 + s ) | timestamp_custom( '%Y-%m-%dT%H:%M:%S-00:00', false ) }}

      doorbell_motion_snooze_countdown:
        device_class: timestamp
        value_template: >-
          {%- set state = states( 'timer.doorbell_motion_snooze' ) %}
          {%- set duration = state_attr( 'timer.doorbell_motion_snooze', 'duration' ) %}
          {%- set n = now().timestamp() %}
          {%- set h = '00' | int %}
          {%- set m = '00' | int %}
          {%- set s = '00' | int %}

          {%- if state not in [ 'idle', 'unknown', 'unavailable' ] %}
            {%- set h, m, s = duration.split( ':' ) | list | map( 'int' ) %}
          {%- endif %}

          {{ ( n + h * 60 * 60 + m * 60 + s ) | timestamp_custom( '%Y-%m-%dT%H:%M:%S-00:00', false ) }}

      front_door_unlocked_snooze_countdown:
        device_class: timestamp
        value_template: >-
          {%- set state = states( 'timer.front_door_unlocked_snooze' ) %}
          {%- set duration = state_attr( 'timer.front_door_unlocked_snooze', 'duration' ) %}
          {%- set n = now().timestamp() %}
          {%- set h = '00' | int %}
          {%- set m = '00' | int %}
          {%- set s = '00' | int %}

          {%- if state not in [ 'idle', 'unknown', 'unavailable' ] %}
            {%- set h, m, s = duration.split( ':' ) | list | map( 'int' ) %}
          {%- endif %}

          {{ ( n + h * 60 * 60 + m * 60 + s ) | timestamp_custom( '%Y-%m-%dT%H:%M:%S-00:00', false ) }}

      fire_tablet_last_app_start_formatted:
        #device_class: timestamp
        friendly_name: Last App Restart
        icon_template: mdi:clock-outline
        value_template: >
          {% set timestamp = states.sensor.fire_tablet_last_app_start.last_updated %}
          {{ relative_time( timestamp ) }}

      fire_tablet_ram_used_memory:
        icon_template: mdi:memory
        unit_of_measurement: GB
        value_template: >-
          {%- set total_memory = states( 'sensor.fire_tablet_ram_total_memory' ) | int(0) -%}
          {%- set free_memory = states( 'sensor.fire_tablet_ram_free_memory' ) | int(0) -%}
          {%- set used_memory = ( total_memory - free_memory ) -%}

          {%- if used_memory > 0 and total_memory > 0 %}
            {{ used_memory / total_memory * 100 }}
          {%- else %}
            Unknown
          {%- endif %}

      # Count interior lights switched ON
      total_lights_on:
        friendly_name: Total Lights On
        icon_template: mdi:lightbulb
        value_template: >-
          {% set state = 'on' %}
          {% set ns = namespace( count = 0 ) %}

          {% for light in state_attr( 'group.lights_all', 'entity_id' ) if is_state( light, state ) %}
            {% set ns.count = ns.count + 1 %}
          {% endfor %}

          {% if is_state( 'switch.garage_light', 'on' ) %}
            {% set ns.count = ns.count + 1 %}
          {% endif %}

          {{ ns.count | int }}

      # Count Doors that are OPEN
      total_doors_open:
        friendly_name: Total Doors Open
        icon_template: mdi:door-open
        value_template: >-
          {% set state = 'on' %}
          {% set device = 'door' %}
          {{ states.binary_sensor 
            | selectattr( 'attributes.device_class', 'defined' ) 
            | selectattr( 'attributes.device_class', 'eq', device ) 
            | selectattr( 'state', 'eq', state ) 
            | map( attribute = 'entity_id' ) 
            | reject( 'in', [ 'binary_sensor.door_front_primary', 'binary_sensor.door_garage', 'binary_sensor.door_living' ] ) 
            | list | length }}

template:
  - trigger:
      # Update on Home Assistant startup
      - platform: homeassistant
        event: start
      # Update on Template reload
      - platform: event
        event_type: event_template_reloaded
      # Update daily at midnight
      - platform: time_pattern
        hours: "00"
        minutes: "00"
        seconds: "00"
    sensor:
      - name: "Waste Day, Solid"
        icon: mdi:trash-can-outline
        state: >-
          {%- set ns = namespace( days = [] ) %}
          {%- set wd = state_attr( 'binary_sensor.waste_day_solid', 'workdays' ) %}
          {%- set today = now().strftime( '%a' ) | lower %}

          {%- if wd %}
            {%- if today in wd %}
              {%- set ns.days = ns.days + [0] %}

            {%- else -%}
              {%- for i in range( 1, 7, 1 ) %}
                {%- set dow = ( now() + timedelta( days = i ) ).strftime( '%a' ) | lower %}

                {%- if dow in wd %}
                  {%- set ns.days = ns.days + [i] %}
                {%- endif %}
              {%- endfor %}
            {%- endif %}

            {% set value = ns.days | min %}

            {%- if 0 == value %}
              Today

            {%- elif 1 == value %}
              Tomorrow

            {%- else %}
              {{value}} days away

            {%- endif %}
          {%- else -%}
            Never

          {%- endif %}

        attributes:
          days_until: >-
            {%- set ns = namespace( days = [] ) %}
            {%- set wd = state_attr( 'binary_sensor.waste_day_solid', 'workdays' ) %}
            {%- set today = now().strftime( '%a' ) | lower %}

            {%- if wd %}
              {%- if today in wd %}
                {%- set ns.days = ns.days + [0] %}

              {%- else -%}
                {%- for i in range( 1, 7, 1 ) %}
                  {%- set dow = ( now() + timedelta( days = i ) ).strftime( '%a' ) | lower %}

                  {%- if dow in wd %}
                    {%- set ns.days = ns.days + [i] %}
                  {%- endif %}
                {%- endfor %}
              {%- endif %}

              {{ ns.days | min | int }}

            {%- else -%}
              {{ '-1' | int }}

            {%- endif %}

      - name: "Waste Day, Bulk"
        icon: mdi:washing-machine
        state: >-
          {%- set ns = namespace( days = [] ) %}
          {%- set wd = state_attr( 'binary_sensor.waste_day_bulk', 'workdays' ) %}
          {%- set today = now().strftime( '%a' ) | lower %}

          {%- if wd %}
            {%- if today in wd %}
              {%- set ns.days = ns.days + [0] %}

            {%- else -%}
              {%- for i in range( 1, 7, 1 ) %}
                {%- set dow = ( now() + timedelta( days = i ) ).strftime( '%a' ) | lower %}

                {%- if dow in wd %}
                  {%- set ns.days = ns.days + [i] %}
                {%- endif %}
              {%- endfor %}
            {%- endif %}

            {% set value = ns.days | min %}

            {%- if 0 == value %}
              Today

            {%- elif 1 == value %}
              Tomorrow

            {%- else %}
              {{value}} days away

            {%- endif %}
          {%- else -%}
            Never

          {%- endif %}

        attributes:
          days_until: >-
            {%- set ns = namespace( days = [] ) %}
            {%- set wd = state_attr( 'binary_sensor.waste_day_bulk', 'workdays' ) %}
            {%- set today = now().strftime( '%a' ) | lower %}

            {%- if wd %}
              {%- if today in wd %}
                {%- set ns.days = ns.days + [0] %}

              {%- else -%}
                {%- for i in range( 1, 7, 1 ) %}
                  {%- set dow = ( now() + timedelta( days = i ) ).strftime( '%a' ) | lower %}

                  {%- if dow in wd %}
                    {%- set ns.days = ns.days + [i] %}
                  {%- endif %}
                {%- endfor %}
              {%- endif %}

              {{ ns.days | min | int }}

            {%- else -%}
              {{ '-1' | int }}

            {%- endif %}

      - name: "Waste Day, Recycling"
        icon: mdi:recycle
        state: >-
          {%- set ns = namespace( days = [] ) %}
          {%- set wd = state_attr( 'binary_sensor.waste_day_recycling', 'workdays' ) %}
          {%- set today = now().strftime( '%a' ) | lower %}

          {%- if wd %}
            {%- if today in wd %}
              {%- set ns.days = ns.days + [0] %}

            {%- else -%}
              {%- for i in range( 1, 7, 1 ) %}
                {%- set dow = ( now() + timedelta( days = i ) ).strftime( '%a' ) | lower %}

                {%- if dow in wd %}
                  {%- set ns.days = ns.days + [i] %}
                {%- endif %}
              {%- endfor %}
            {%- endif %}

            {% set value = ns.days | min %}

            {%- if 0 == value %}
              Today

            {%- elif 1 == value %}
              Tomorrow

            {%- else %}
              {{value}} days away

            {%- endif %}
          {%- else -%}
            Never

          {%- endif %}

        attributes:
          days_until: >-
            {%- set ns = namespace( days = [] ) %}
            {%- set wd = state_attr( 'binary_sensor.waste_day_recycling', 'workdays' ) %}
            {%- set today = now().strftime( '%a' ) | lower %}

            {%- if wd %}
              {%- if today in wd %}
                {%- set ns.days = ns.days + [0] %}

              {%- else -%}
                {%- for i in range( 1, 7, 1 ) %}
                  {%- set dow = ( now() + timedelta( days = i ) ).strftime( '%a' ) | lower %}

                  {%- if dow in wd %}
                    {%- set ns.days = ns.days + [i] %}
                  {%- endif %}
                {%- endfor %}
              {%- endif %}

              {{ ns.days | min | int }}

            {%- else -%}
              {{ '-1' | int }}

            {%- endif %}

  - trigger:
      # Update on Home Assistant startup
      - platform: homeassistant
        event: start
      # Update on Template reload
      - platform: event
        event_type: event_template_reloaded
      # Update daily at midnight
      - platform: time_pattern
        hours: "00"
        minutes: "00"
        seconds: "00"
      # Update daily at noon
      - platform: time_pattern
        hours: "12"
        minutes: "00"
        seconds: "00"
    sensor:
      - name: "Cleaning Day"
        icon: mdi:spray-bottle
        state: >-
          {%- set ns = namespace( days = [] ) %}
          {%- set wd = state_attr( 'binary_sensor.cleaning_day', 'workdays' ) %}
          {%- set today = now().strftime( '%a' ) | lower %}
          {%- set isWeekEven = is_state( 'sensor.is_week_even', 'on' ) %}

          {%- if wd %}
            {%- if today in wd %}
              {%- set ns.days = ns.days + [0] %}

            {%- else -%}
              {%- for i in range( 1, 7, 1 ) %}
                {%- set dow = ( now() + timedelta( days = i ) ).strftime( '%a' ) | lower %}

                {%- if dow in wd %}
                  {%- set ns.days = ns.days + [i] %}
                {%- endif %}
              {%- endfor %}
            {%- endif %}

            {% set value = ns.days | min %}

            {%- if isWeekEven %}
              {%- if ( 0 == value ) %}
                Today

              {%- elif ( 1 == value ) %}
                Tomorrow

              {%- else %}
                in {{ value }} days

              {%- endif %}
            {%- else %}
              in {{ value + 7 }} days

            {%- endif %}
          {%- else -%}
            Never

          {%- endif %}

        attributes:
          days_until: >-
            {%- set ns = namespace( days = [] ) %}
            {%- set wd = state_attr( 'binary_sensor.cleaning_day', 'workdays' ) %}
            {%- set today = now().strftime( '%a' ) | lower %}
            {%- set isWeekEven = is_state( 'sensor.is_week_even', 'on' ) %}

            {%- if wd %}
              {%- if today in wd %}
                {%- set ns.days = ns.days + [0] %}

              {%- else -%}
                {%- for i in range( 1, 7, 1 ) %}
                  {%- set dow = ( now() + timedelta( days = i ) ).strftime( '%a' ) | lower %}

                  {%- if dow in wd %}
                    {%- set ns.days = ns.days + [i] %}
                  {%- endif %}
                {%- endfor %}
              {%- endif %}

              {% set value = ns.days | min %}

              {%- if isWeekEven %}
                {{value}}

              {%- else %}
                {{ value + 7 }}

              {%- endif %}
            {%- else -%}
              {{ '-1' | int }}

            {%- endif %}

  - trigger:
      # Update on Home Assistant startup
      - platform: homeassistant
        event: start
      # Update on Template reload
      - platform: event
        event_type: event_template_reloaded
      # Update every minute
      - platform: time_pattern
        hours: "00"
        minutes: "/01"
        seconds: "00"
    sensor:
      - name: "Automation Daily Status"
        state: >-
          {%- set offset = ( 30 * 60 ) %}
          {%- set next_sunset     = as_timestamp( states.sun.sun.attributes.next_setting ) %}
          {%- set modified_sunset = ( next_sunset - offset ) | int %}
          {%- set ts_next_sunset  = modified_sunset | timestamp_custom( '%H%M%S' ) | int %}
          {%- set ts_current      = as_timestamp( now() ) | timestamp_custom( '%H%M%S' ) | int %}

          {%- if( is_state( 'input_boolean.automation_daily_sunset', 'on' ) ) %}
            Active
          {%- elif( ts_current > ts_next_sunset ) %}
            Complete
          {%- else %}
            Runs at {{ modified_sunset | timestamp_custom( '%I:%M %p' ) }}
          {%- endif %}
        icon: >-
          {%- set offset = ( 30 * 60 ) %}
          {%- set next_sunset     = as_timestamp( states.sun.sun.attributes.next_setting ) %}
          {%- set modified_sunset = ( next_sunset - offset ) | int %}
          {%- set ts_next_sunset  = modified_sunset | timestamp_custom( '%H%M%S' ) | int %}
          {%- set ts_current      = as_timestamp( now() ) | timestamp_custom( '%H%M%S' ) | int %}

          {%- if( is_state( 'input_boolean.automation_daily_sunset', 'on' ) ) %}
          mdi:clock-alert-outline
          {%- elif( ts_current > ts_next_sunset ) %}
          mdi:clock-check-outline
          {%- else %}
          mdi:clock-outline
          {%- endif %}
