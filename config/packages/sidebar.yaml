################################################################################
#
# @author      : Thomas Maxson
# @package     : Templates
# @description :
#
################################################################################

template:
  - sensor:
      - unique_id: sidebar
        state: template
        attributes:
          time: >
            {%- set hours = now().strftime( '%I' ) %}
            {%- set minutes = now().strftime( '%M' ) %}

            {{ hours }}<span class="time-colon">:</span>{{ minutes }}

          date: |
            {%- set weekday = now().strftime( '%A' ) %}
            {%- set month = now().strftime( '%B' ) %}

            {{ weekday }},<br>
            {{ month }} {{ now().day }}

          greeting: |
            {%- set time = now().hour %}

            {%- if time <= 5 -%}
              Good Night

            {%- elif time <= 11 -%}
              Good Morning

            {%- elif time <= 19 -%}
              Good Afternoon

            {%- else %}
              Good Evening

            {%- endif -%}

          # date_greeting: |
          #   {%- set weekday_full_name = now().strftime( '%A' ) %}
          #   {%- set month_full_name = now().strftime( '%B' ) %}

          #   {%- set day = now().strftime( '%-d' ) %}
          #   {%- set weekday = now().strftime( '%w' ) %}

          #   Good morning. Today is {{ weekday_full_name }}, {{ month_full_name }} the
          #   {% if day | int == 1 or day | int == 21 or day | int == 31 %}
          #     {{ day }}st
          #   {% elif day | int == 2 or day | int == 22 %}
          #     {{ day }}nd
          #   {% elif day | int == 3 or day | int == 23 %}
          #     {{ day }}rd
          #   {% else %}
          #     {{ day }}th
          #   {% endif %}.

          holiday: |
            {%- if is_state( 'input_boolean.sidebar_display_holidays', 'on' ) %}
              {%- if states.calendar.holidays_in_united_states.state == 'on' %}
                Today is {{ states.calendar.holidays_in_united_states.attributes.message }}.

              {%- endif %}
            {%- endif %}

          anniversary: |
            {%- if is_state( 'input_boolean.sidebar_display_celebrations', 'on' ) %}
              {%- if states.calendar.anniverseries.state == 'on' %}
                Today is {{ states.calendar.anniverseries.attributes.message }}.

              {%- endif %}
            {%- endif %}

          birthday: |
            {%- if is_state( 'input_boolean.sidebar_display_celebrations', 'on' ) %}
              {%- if states.calendar.birthdays.state == 'on' %}
                Today is {{ states.calendar.birthdays.attributes.message }}. {{ [
                  'Ready for another lap around the sun?',
                  'They can cry if they want to.',
                  'The confetti cannon is ready.',
                  'I hope the cake is tasty.'
                ] | random }}
              {%- endif %}
            {%- endif %}

          neighborhood: |
            {%- if is_state( 'input_boolean.sidebar_display_neighborhood', 'on' ) %}
              {%- if states.calendar.regency_lakes.state == 'on' %}
                {%- set message = states.calendar.regency_lakes.attributes.message %}
                {%- set description = states.calendar.regency_lakes.attributes.description %}

                {%- if description != '' %}
                  {{ description }}

                {%- elif message != '' %}
                  {{ message }} in {{ [
                    'your neighborhood', 
                    'Regency Lakes', 
                    'Osprey Point'
                  ] | random }} today.

                {%- endif %}
              {%- endif %}
            {%- endif %}

          weather: |
            {%- if is_state( 'input_boolean.sidebar_display_weather_forecast', 'on' ) %}
              {%- set ignore = [ 'unknown', 'unavailable' ] -%}
              {%- set temperature = states( 'sensor.openweathermap_temperature' ) | round %}
              {%- set forecast = states( 'sensor.openweathermap_forecast_condition' ) %}

              {%- if temperature not in ignore %}
                It's currently {{ temperature }}Â°

                {%- if is_state( 'sensor.openweathermap_forecast_condition', 'rainy' ) %}
                  {%- set precip = states( 'sensor.openweathermap_forecast_precipitation_probability' ) | round %}
                  {{ [
                    'with expected rain.', 
                    'with expected showers.'
                  ] | random }}

                {%- elif is_state( 'sensor.openweathermap_forecast_condition', 'cloudy' ) %}
                  {{ [
                    'with clouds.', 
                    'with cloudy skies.'
                  ] | random }}

                {%- elif is_state( 'sensor.openweathermap_forecast_condition', 'partlycloudy' ) %}
                  {{ [
                    'with some clouds.', 
                    'with partly cloudy skies.',
                    'with scattered clouds'
                  ] | random }}

                {%- else %}
                  {%- if is_state( 'sun.sun', 'above_horizon' ) %}
                    {{ [
                      'and sunny.', 
                      'with sun.'
                    ] | random }}

                  {%- else %}
                    {{ [
                      'and clear.', 
                      'with clear skies.'
                    ] | random }}

                  {%- endif %}
                {%- endif %}

              {%- else %}
                Unable to load weather information.

              {%- endif %}
            {%- endif %}

          lights_on: |
            {%- set ignore = [ '0', 'unknown', 'unavailable' ] -%}
            {%- set count = states( 'sensor.total_lights_on' ) %}

            {%- if count not in ignore and is_state( 'input_boolean.sidebar_display_lights_on', 'on' ) %}
              {{ iif( ( '1' == count ), count + ' light is on', count + ' lights are on' ) }}

            {%- endif %}

          doors_open: |
            {%- set ignore = [ '0', 'unknown', 'unavailable' ] -%}
            {%- set count = states( 'sensor.total_doors_open' ) %}

            {%- if count not in ignore and is_state( 'input_boolean.sidebar_display_doors_open', 'on' ) %}
              {{ iif( ( '1' == count ), count + ' door is open', count + ' doors are open' ) }}

            {%- endif %}

          exterior_open_doors: >-
            {%- if is_state( 'input_boolean.sidebar_display_exterior_door_status', 'on' ) %}
              {%- set ns = namespace( output = [] ) -%}
              {%- set state_lock_front  = states( 'lock.front_door' ) -%}
              {%- set ignore_lock_front = [ 'locked', 'unknown', 'unavailable' ] -%}

              {%- set state_door_front   = states( 'binary_sensor.door_front_primary' ) -%}
              {%- set ignore_door_front = [ 'off', 'unknown', 'unavailable' ] -%}

              {%- set state_cover_garage = states( 'cover.garage_door' ) -%}
              {%- set ignore_cover_garage = [ 'closed', 'unknown', 'unavailable' ] -%}

              {%- set state_door_garage  = states( 'binary_sensor.door_garage' ) -%}
              {%- set ignore_door_garage = [ 'off', 'unknown', 'unavailable' ] -%}

              {%- set state_door_sliding = states( 'binary_sensor.door_living' ) -%}
              {%- set ignore_door_sliding = [ 'off', 'unknown', 'unavailable' ] -%}

              {%- set status_lock_front   = iif( ( state_lock_front not in ignore_lock_front ), true, false ) -%}
              {%- set status_door_front   = iif( ( state_door_front not in ignore_door_front ), true, false ) -%}
              {%- set status_cover_garage = iif( ( state_cover_garage not in ignore_cover_garage ), true, false ) -%}
              {%- set status_door_garage  = iif( ( state_door_garage not in ignore_door_garage ), true, false ) -%}
              {%- set status_door_sliding = iif( ( state_door_sliding not in ignore_door_sliding ), true, false ) -%}

              {%- if ( true == status_lock_front ) and ( true == status_door_front ) -%}
                {%- set ns.output = ns.output + [ 'front door is ' + state_lock_front + ' and open' ] -%}
              {%- elif ( true == status_lock_front ) -%}
                {%- set ns.output = ns.output + [ 'front door is ' + state_lock_front ] -%}
              {%- elif ( true == status_door_front ) -%}
                {%- set ns.output = ns.output + [ 'front door is open' ] -%}
              {%- endif -%}

              {%- if ( true == status_cover_garage ) -%}
                {%- set ns.output = ns.output + [ 'garage door is ' + state_cover_garage ] -%}
              {%- endif -%}

              {%- if ( true == status_door_garage ) -%}
                {%- set ns.output = ns.output + [ 'garage interior door is open' ] -%}
              {%- endif -%}

              {%- if ( true == status_door_sliding ) -%}
                {%- set ns.output = ns.output + [ 'sliding glass door is open' ] -%}
              {%- endif -%}

              {%- if ns.output | length == 1 -%}
                The {{ ns.output | join( '' ) }}.
              {%- elif ns.output | length >= 2 -%}
                {% for e in ns.output %}
                  {% if loop.first %}
                    The {{ e }}, 
                  {% elif loop.last %}
                    and the {{ e }}.
                  {% else %}
                    the {{ e }}, 
                  {% endif %}
                  
                {% endfor %}
              {%- endif -%}
            {%- endif %}

          sunrise_sunset: >-
            {%- if is_state( 'input_boolean.sidebar_display_sunrise_sunset', 'on' ) -%}
              {% if is_state( 'sun.sun', 'below_horizon' ) %}
                You have
                {%- set seconds = ( as_timestamp( states.sun.sun.attributes.next_rising ) - now().timestamp() ) %}
                {%- set minutes = ( seconds / 60 ) | int %}
                {%- set hours   = ( seconds / ( 60 * 60 ) ) | int %}

                {%- if hours > 1 %}
                  {{ hours }} {{ iif( ( hours == 1 ), 'hour', 'hours') }}
                {%- else %}
                  {{ minutes }} {{ iif( ( minutes == 1 ), 'minute', 'minutes') }}
                {%- endif %}
                {{ [
                  ' until the sun rises.',
                  ' until the sun is up.',
                  ' before the sun officially rises. '
                ] | random }}
              {%- else %}
                You have
                {% set seconds = as_timestamp( states.sun.sun.attributes.next_setting ) - now().timestamp() %}
                {%- set minutes = ( seconds / 60 ) | int %}
                {%- set hours   = ( seconds / ( 60 * 60 ) ) | int %}

                {%- if hours > 1 %}
                  {{ hours }} {{ iif( ( hours == 1 ), 'hour', 'hours') }}
                {%- else %}
                  {{ minutes }} {{ iif( ( minutes == 1 ), 'minute', 'minutes') }}
                {%- endif %}

                {{ [
                  ' until the sun sets for the day.',
                  ' until the sun slips below the horizon.',
                  ' before the sun officially sets.'
                ] | random }}
              {%- endif %}
            {%- endif %}

          waste: |
            {%- if is_state( 'input_boolean.sidebar_display_waste_reminder', 'on' ) -%}
              {%- set days_until_waste_solid   = state_attr( 'sensor.waste_day_solid', 'days_until' ) %}
              {%- set days_until_waste_bulk    = state_attr( 'sensor.waste_day_bulk', 'days_until' ) %}
              {%- set days_until_waste_recycle = state_attr( 'sensor.waste_day_recycling', 'days_until' ) %}

              {%- set is_take_out_day_waste_solid   = ( days_until_waste_solid == 1 ) %}
              {%- set is_take_out_day_waste_bulk    = ( days_until_waste_bulk == 1 ) %}
              {%- set is_take_out_day_waste_recycle = ( days_until_waste_recycle == 1 ) %}

              {%- set is_bring_in_day_waste_solid   = ( days_until_waste_solid == 0 ) %}
              {%- set is_bring_in_day_waste_recycle = ( days_until_waste_recycle == 0 ) %}

              {%- set is_time_out = is_state( 'binary_sensor.waste_take_out_time', 'on' ) %}
              {%- set is_time_in  = is_state( 'binary_sensor.waste_bring_in_time', 'on' ) %}

              {%- if ( is_time_out ) -%}
                {%- if ( ( is_take_out_day_waste_solid ) and ( is_take_out_day_waste_bulk ) and ( is_take_out_day_waste_recycle ) ) -%}
                  {{ [ 
                    'Tomorrow is the big day: trash, recycling and bulk trash day! ',
                    'Trash, recycling and bulk trash should go out before tomorrow morning. ',
                    'Do not forget to take the trash, recycling and bulk trash out. '
                  ] | random }}

                {%- elif ( ( is_take_out_day_waste_solid ) and ( is_take_out_day_waste_recycle ) ) -%}
                  {{ [ 
                    'Tomorrow is the big day: trash and recycling day! ',
                    'Trash and recycling bins should go out before tomorrow morning. ',
                    'Do not forget to take the trash and recycling bins out. '
                  ] | random }}

                {%- elif ( ( is_take_out_day_waste_solid ) and ( is_take_out_day_waste_bulk ) ) -%}
                  {{ [ 
                    'Tomorrow is the big day: trash and bulk trash day! ',
                    'Trash and bulk trash should go out before tomorrow morning. ',
                    'Do not forget to take the trash and bulk trash out. '
                  ] | random }}

                {%- elif ( ( is_take_out_day_waste_solid ) and ( is_take_out_day_waste_recycle ) ) -%}
                  {{ [ 
                    'Tomorrow is the big day: recycling and bulk trash day! ',
                    'Recycling and bulk trash should go out before tomorrow morning. ',
                    'Do not forget to take the recycling and bulk trash out. '
                  ] | random }}

                {%- elif ( is_take_out_day_waste_solid ) -%}
                  {{ [ 
                    'Tomorrow is the big day, trash day! ',
                    'Trash should go out before tomorrow morning. ',
                    'Do not forget to take the trash out. '
                  ] | random }}

                {%- elif ( is_take_out_day_waste_recycle ) -%}
                  {{ [ 
                    'Tomorrow is the big day, recycling day! ',
                    'Recycling should go out before tomorrow morning. ',
                    'Do not forget to take the recylcing out. '
                  ] | random }}

                {%- elif ( is_take_out_day_waste_bulk ) -%}
                  {{ [ 
                    'Tomorrow is the big day, bulk trash day! ',
                    'Bulk trash should go out before tomorrow morning. ',
                    'Do not forget to take the bulk trash out. '
                  ] | random }}

                {%- endif -%}
              {%- elif ( is_time_in ) -%}
                {%- if ( ( is_bring_in_day_waste_solid ) and ( is_bring_in_day_waste_recycle ) ) -%}
                  {{ [ 
                    'Do not forget to bring the trash and recycling bins in.',
                    'The trash and recycling bins will feel lonely if you leave them outside.',
                    'The HOA will get mad if you leave the trash and recycling bins out on the street.'
                  ] | random }}

                {%- elif ( is_bring_in_day_waste_solid ) -%}
                  {{ [ 
                    'Do not forget to bring the trash bins in.',
                    'The trash bins will feel lonely if you leave them outside.',
                    'The HOA will get mad if you leave the trash bins out on the street.'
                  ] | random }}

                {%- elif ( is_bring_in_day_waste_recycle ) -%}
                  {{ [ 
                    'Do not forget to bring the recycling bins in.',
                    'The recycling bins will feel lonely if you leave them outside.',
                    'The HOA will get mad if you leave the recycling bins out on the street.'
                  ] | random }}

                {%- endif -%}
              {%- endif -%}
            {%- endif -%}
