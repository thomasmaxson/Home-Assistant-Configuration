################################################################################
#
# @author      : Thomas Maxson
# @package     : Button Card Templates
# @description :
#
################################################################################

#
# BASE
# --------------------------------------------------

base:
  variables:
    state: >
      [[[ return entity === undefined || entity.state; ]]]
    timeout: >
      [[[ return entity === undefined || Date.now() - Date.parse(entity.last_changed); ]]]
    light_color: >
      [[[ return entity === undefined || entity.state === 'unavailable' ? 'rgba(115, 115, 115, 0.4)' : 'var(--button-card-light-color-no-temperature)'; ]]]
  aspect_ratio: 1/1
  show_state: true
  show_icon: true
  size: 90%
  tap_action:
    animation_card: |
      [[[
        const animation_speed_ms = 900;
        const animation = `card_bounce ${animation_speed_ms}ms cubic-bezier(0.22, 1, 0.36, 1)`;
        this.shadowRoot.getElementById("card").style.animation = animation;
        window.setTimeout(() => {
          this.shadowRoot.getElementById("card").style.animation = "none";
        }, animation_speed_ms)
      ]]]
    action: toggle
    haptic: medium
  styles:
    card:
      - border-radius: var(--custom-button-card-border-radius)
      - -webkit-tap-highlight-color: rgba(0, 0, 0, 0)
      - transition: none
      - padding: 10%
      - --mdc-ripple-color: >
          [[[
            return (variables.state == 'on' || variables.state == 'playing' || variables.state == 'cool') ?
              'rgb(0, 0, 0)' :
              'rgba(255, 255, 255, 0.3)';
          ]]]
      - color: >
          [[[
            return (variables.state == 'on' || variables.state == 'playing' || variables.state == 'cool') ?
              'rgba(0, 0, 0, 0.6)' :
              'rgba(255, 255, 255, 0.3)';
          ]]]
      - background-color: >
          [[[
            return (variables.state == 'on' || variables.state == 'playing' || variables.state == 'cool') ?
              'rgba(255, 255, 255, 0.8)' :
              'rgba(115, 115, 115, 0.2)';
          ]]]
    grid:
      - grid-template-areas: |
          "i  circle"
          "n  n"
          "s  s"
      - grid-template-columns: repeat(2, 1fr)
      - grid-template-rows: auto repeat(2, min-content)
      - gap: 2%
      - align-items: start
    img_cell:
      - justify-content: start
      - align-items: start
    icon:
      - justify-self: start
      - height: auto
      - color: >
          [[[
            if( variables.state == 'playing' || variables.state == 'home' || variables.state == 'Home' || variables.state == 'cool' )
            { 
              return 'var( --paper-item-icon-active-color )';

            } else if( variables.state == 'on' )
            { 
              return 'var( --paper-item-icon-active-color )';

            } else
            {
              return 'rgba( 255, 255, 255, 0.3 )';

            }
          ]]]
    name:
      - justify-self: start
      - line-height: 115%
      - letter-spacing: 0.05vw
    state:
      - justify-self: start
      - line-height: 115%
      - letter-spacing: 0.05vw
  extra_styles: |
    @media screen and (max-width: 992px) {
      #name, #state {
        letter-spacing: 0.12vw;
      }
    }

    @media screen and (max-width: 1200px) {
      #name, #state {
        letter-spacing: 0.05vw;
      }
    }

    @keyframes card_bounce {
      0% {
        transform: scale(1);
      }
      15% {
        transform: scale(0.9);
      }
      25% {
        transform: scale(1);
      }
      30% {
        transform: scale(0.98);
      }
      100% {
        transform: scale(1);
      }
    }

#
# CIRCLE
# --------------------------------------------------

circle:
  custom_fields:
    circle: >
      [[[
        if (variables.state == 'on') {
          const input = variables.circle_input;
          const radius = 20.5;
          const circumference = radius * 2 * Math.PI;
          return `
            <svg viewBox="0 0 50 50">
              <style>
                circle {
                  transform: rotate(-90deg);
                  transform-origin: 50% 50%;
                  stroke-dasharray: ${circumference};
                  stroke-dashoffset: ${circumference - input / 100 * circumference};
                }
                tspan {
                  font-size: 10px;
                }
              </style>
              <circle cx="25" cy="25" r="${radius}" stroke="#b2b2b2" stroke-width="1.5" fill="none" />
              <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${input}<tspan font-size="10">%</tspan></text>
            </svg>
          `;
        }
      ]]]
  styles:
    custom_fields:
      circle:
        - display: initial
        - width: 90%
        - letter-spacing: 0.03vw
        - margin: -6% -6% 0 0
        - padding-top: 10%
        - justify-self: end
        - opacity: 1

#
# SIDEBAR
# --------------------------------------------------

sidebar_template:
  show_state: false
  show_icon: false
  tap_action:
    action: none
  name: |
    [[[
      if (entity) {
        let attributes = '';
        for (const [key, value] of Object.entries(entity.attributes)) {
          value != false ? attributes += `<p class="${key}">${value}</p>` : null;
        }
        return attributes;
      }
    ]]]
  extra_styles: |
    #card {
      padding: 0;
    }

    #container {
      display: flex !important;
    }

    #name { 
      padding: 1.8vw 2.5vw 0 var(--custom-layout-card-padding);
      color: #6a7377;
      text-align: left;
      white-space: normal;
    }

    p {
      margin-top: 1em;
      font-size: calc( var( --sidebar-font-size ) * 1.4 );
      line-height: calc( var(--sidebar-line-height) + 1.2 );
      font-weight: 300;
      letter-spacing: 0.06vw;
    }

    p.time,
    p.date, 
    p.greeting { color: rgba(255, 255, 255, 0.8);}

    p.time {
      margin-top: 0;
      margin-bottom: 0;
      margin-left: -0.3vw;
      line-height: 1 !important;
      font-size: calc( var(--sidebar-time-font-size ) * 1.5 );
      font-weight: 200;
      letter-spacing: -0.05vw;
    }

    p.time .time-colon {
      position: relative;
      top: -.09em;
    }

    /* portrait */
    @media screen and (max-width: 1200px) {
      p {
        font-size: calc(var(--sidebar-font-size) * 1.4 );
        line-height: calc(var(--sidebar-line-height) * 1.4 );
      }

      p.time {
        font-size: calc(var(--sidebar-time-font-size) * 1.4 );
      }
    }

    /* phone */
    @media screen and (max-width: 992px) {
      #card {
        padding-top: 4%;
      }

      #name {
        padding: 0 0 0 1vw;
      }

      p {
        font-size: calc(var(--sidebar-font-size) * 5 );
        line-height: calc(var(--sidebar-line-height) * 5 );
        letter-spacing: 0.16vw;
      }

      p.time {
        display: none !important;
        font-size: calc(var(--sidebar-time-font-size) * 2.6 );
      }

      p.greeting { display: none !important;}
    }

#
# SWITCH
# --------------------------------------------------

popup_switch:
  template:
    - base
    - circle
  variables:
    circle_input: >
      [[[ return 100; ]]]
  hold_action: !include popup/light-controls-switch.yaml
  double_tap_action: !include popup/light-controls-switch.yaml

#
# DIMMER LIGHT
# --------------------------------------------------

popup_dimmer:
  template:
    - base
    - circle
  variables:
    circle_input: >
      [[[ return entity === undefined || Math.round(entity.attributes.brightness / 2.54); ]]]
  hold_action: !include popup/light-controls-dimmer.yaml
  double_tap_action: !include popup/light-controls-dimmer.yaml

#
# DIMMER WITH COLOR PICKER
# --------------------------------------------------

popup_dimmer_colors:
  template:
    - base
    - circle
  variables:
    circle_input: >
      [[[ return entity === undefined || Math.round(entity.attributes.brightness / 2.54); ]]]
  hold_action: !include popup/light-controls-dimmer-color.yaml
  double_tap_action: !include popup/light-controls-dimmer-color.yaml

#
# POPUP BUTTON:
# NAME WITH ICON
# --------------------------------------------------

icon_name:
  size: 1.4em
  color: "#9da0a2"
  styles:
    grid:
      - grid-template-areas: '"i n"'
      - grid-column-gap: 0.3em
    name:
      - font-size: 1.06em
      - letter-spacing: 0.015em
    card:
      - color: "#9da0a2"
      - border-radius: 0.6em
      - padding: 1em 1.4em 1em 1.2em
      - width: max-content
      - font-size: 1.06em
      - font-weight: 500
      - letter-spacing: 0.015em
      - background: "#FFFFFF10"

#
# POPUP BUTTON:
# ICON ONLY
# --------------------------------------------------

icon_only:
  show_name: false
  color: "#9da0a2"
  styles:
    card:
      - color: "#9da0a2"
      - border-radius: 0.6em
      - width: 4em
      - height: 3.7em
      - background: "#FFFFFF10"

#
# POPUP BUTTON:
# COLOR LIGHT
# --------------------------------------------------

color_light:
  styles:
    card:
      - border-radius: 50%
      - height: 4em
      - width: 4em
      - margin: 4px

#
# DETAILS
# --------------------------------------------------

details:
  aspect_ratio: 2/1
  show_state: false
  show_icon: true
  size: 40px

  # Add space to bottom, on mobile devices
  style: |
    :host { 
      padding: 0;
      margin-bottom: 0 !important;
      min-height: 40px;
    }

    @media screen and (max-width: 992px) {
      :host {
        padding-top: 20px;
        padding-bottom: 20px;
        margin-bottom: 40px !important;
        min-height: 80px;
      }
    }

  styles:
    card:
      - border-radius: var(--custom-button-card-border-radius)
      - margin: 0
      - -webkit-tap-highlight-color: rgba(0, 0, 0, 0)
      - transition: none
    grid:
      - grid-template-areas: |
          "i"
      - grid-template-columns: 1fr
      - grid-template-rows: 1fr
      - gap: 0
      - justify-content: center
      - align-items: center
    icon:
      - justify-self: center
      - align-items: center
      - height: auto
      - color: rgba( 115, 115, 115, 0.8 )

#
# PERSON
# --------------------------------------------------

person:
  template:
    - base
    - circle
  state_display: >
    [[[ return ( variables.state === 'home' || variables.state === 'Home' ) ? 'Home' : 'Away'; ]]]

  triggers_update: sensor.time
  styles:
    card:
      - color: rgba(255, 255, 255, 0.3)
      - background-color: rgba(115, 115, 115, 0.2)
    grid:
      - grid-template-areas: |
          "icon  circle"
          "n  n"
          "s  s"
    custom_fields:
      circle:
        - opacity: 0
      icon:
        - clip-path: circle()
        - width: 79%
        - pointer-events: none
        - display: grid
        - filter: >
            [[[
              return (variables.state === 'home' || variables.state === 'Home') ?
                'grayscale(0)' :
                'grayscale(1)';
            ]]]
  extra_styles: |
    #img-cell { display: none !important;}
  custom_fields:
    icon: >
      [[[ return entity === undefined ? null : `<img src="${states[entity.entity_id].attributes.entity_picture}" width="100%">`; ]]]
    circle: >
      [[[
        const time = c => {
          const s = (c / 1000);
          const m = (c / (1000 * 60));
          const h = (c / (1000 * 60 * 60));
          const d = (c / (1000 * 60 * 60 * 24));
          if (s < 60) {
            return parseInt(s) + 's';
          } else if (m < 60) {
            return parseInt(m) + 'm';
          } else if (h < 24) {
            return parseInt(h) + 'h';
          } else {
            return parseInt(d) + 'd';
          }
        };
        let last_changed = entity === undefined  ? ' ' : (time(Date.now() - Date.parse(states[entity.entity_id].last_changed)));
        const stroke_color = ( variables.state === 'home' || variables.state === 'Home' ) ? '#b2b2b2' : 'none';
        const fill_color = variables.state === 'not_home' ? 'rgba(255, 255, 255, 0.04)' : 'none';
        return `
          <svg viewBox="0 0 50 50">
            <circle cx="25" cy="25" r="20.5" stroke="${stroke_color}" stroke-width="1.5" fill="${fill_color}" />
            <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${last_changed}</text>
          </svg>
        `;
      ]]]

#
# PET
# --------------------------------------------------

pet:
  template:
    - base
    - circle
  state_display: >
    [[[ return ( variables.state === 'on' ) ? 'Home' : 'Away'; ]]]
  styles:
    card:
      - color: rgba(255, 255, 255, 0.3)
      - background-color: rgba(115, 115, 115, 0.2)
    grid:
      - grid-template-areas: |
          "i  circle"
          "n  n"
          "s  s"
    icon:
      - border-radius: 100%
      - clip-path: circle()
    entity_picture:
      - clip-path: circle()
      - border-radus: 100%
      - filter: >
          [[[
            return (variables.state === 'on') ?
              'grayscale(0)' :
              'grayscale(1)';
          ]]]

    custom_fields:
      circle:
        - opacity: 0

    circle: >
      [[[ return ''; ]]]
