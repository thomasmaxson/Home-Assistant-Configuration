################################################################################
#
# @author      : Thomas Maxson
# @package     : Button Card Templates, Laundry
# @description :
#
################################################################################

laundry:
  template:
    - base
    #- circle
    - loader
  state_display: >
    [[[ 
      if( entity )
      { 
        if( '---' != entity.attributes.cycle_type )
        { 
          return entity.attributes.cycle_type;
        }

        return 'Ready';
        
      }
    ]]]
  variables:
    time_remaining: >
      [[[ return !entity || entity.attributes.time_remaining; ]]]
    cycle_type: >
      [[[ return !entity || entity.attributes.cycle_type; ]]]
    circle_value: >
      [[[
        if( entity )
        {
          let new_time = entity.attributes.time_remaining;

          if( 'Off' != new_time )
          { 
            let new_parts = new_time.split( ':' );

            let new_seconds = parseInt( parseFloat( new_parts[0] ) * 60 ) + parseFloat( new_parts[1] );

            return new_seconds.toFixed();
          }
        }

        return 0;
      ]]]
    circle_value_unit: "m"
    # circle_percent: >
    #   [[[
    #     if( entity )
    #     {
    #         const orig_time = entity.attributes.original_time;

    #         if( orig_time != 'null' )
    #         {
    #           const orig_parts = orig_time.split( ':' );

    #           const new_time  = entity.attributes.time_remaining;

    #           if( 'Off' != new_time )
    #           {
    #             const new_parts = new_time.split( ':' );

    #             const orig_seconds = parseInt( parseFloat( orig_parts[0] ) * 60 ) + parseFloat( orig_parts[1] );
    #             const new_seconds = parseInt( parseFloat( new_parts[0] ) * 60 ) + parseFloat( new_parts[1] );

    #             const percent = ( ( ( new_seconds / orig_seconds ) * 100 ).toFixed() - 100 ) * -1;

    #             return percent;
    #           }
    #         }

    #         return 0;
    #     }
    #     return 0;
    #   ]]]
  custom_fields:
    remaining: >
      [[[
        if( entity )
        {
          const state = variables.state;
          const time  = variables.time_remaining;

          switch( state )
          { 
            case 'Run':
            case 'Paused':
              if( 'Off' == time || '00:00' == time )
              { 
                return `Done`;
              } else
              { 
                return `${variables.time_remaining} remaining`;
              }
              break;

            case 'Standby':
              return `Done`;
              break;

            default: 
              return `---`;
              break;

          }
        }

        return `Unknown`;
      ]]]
  aspect_ratio: 3/1
  tap_action: !include ../popup/status-laundry.yaml
  double_tap_action: !include ../popup/status-laundry.yaml
  styles:
    grid:
      - grid-template-areas: |
          "i  n"
          "i  s"
          "i  remaining"
      #- grid-template-columns: repeat(2, 1fr)
      - grid-template-columns: 35% 65%
      #- grid-template-rows: auto
      - grid-template-rows: repeat(3, auto)
    card:
      - padding: 4% 2% 4% 0
      - border: 0.12vw solid rgba(115, 115, 115, 0.15)
    img_cell:
      - width: 85%
    name:
      - line-height: 150%
    state:
      - line-height: 150%
  extra_styles: |
    #loader { display: none !important;}

    #remaining { 
      justify-self: start !important;
      padding-top: 10px;
      line-height: 150%;
      place-self: center;
    }
